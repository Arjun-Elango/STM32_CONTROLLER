
07_USART_RECEIVER_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003f0  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  000013f0  2**0
                  CONTENTS
  4 .ARM          00000000  080003e8  080003e8  000013f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e8  080003f0  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004bd  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e5  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000052  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e820  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d7d  00000000  00000000  000103ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053223  00000000  00000000  00011137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006435a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f8  00000000  00000000  000643a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00064498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003d0 	.word	0x080003d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003d0 	.word	0x080003d0

080001d4 <main>:
 */
#include "stm32f4xx.h"
#include "usart.h"
#include <stdio.h>

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	usart_init();
 80001da:	f000 f813 	bl	8000204 <usart_init>
	int ch; // the receiving value
	while(1)
	{
		ch = usart_read(); //reading the value
 80001de:	f000 f897 	bl	8000310 <usart_read>
 80001e2:	6038      	str	r0, [r7, #0]
		usart_write(ch); // write the same value
 80001e4:	6838      	ldr	r0, [r7, #0]
 80001e6:	f000 f87b 	bl	80002e0 <usart_write>
        for(int i=0;i<100000;i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <main+0x22>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a01      	ldr	r2, [pc, #4]	@ (8000200 <main+0x2c>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	ddf8      	ble.n	80001f0 <main+0x1c>
		ch = usart_read(); //reading the value
 80001fe:	e7ee      	b.n	80001de <main+0xa>
 8000200:	0001869f 	.word	0x0001869f

08000204 <usart_init>:
#define RE (1U<<2)
#define UE (1U<<13)
#define TXE (1U<<7) //it ensure the last bit data transfered
#define RXE (1U<<5) //it ensure the received data is ready to be read

void usart_init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*Enable clock for PORT A*/
	RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b32      	ldr	r3, [pc, #200]	@ (80002d4 <usart_init+0xd0>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a31      	ldr	r2, [pc, #196]	@ (80002d4 <usart_init+0xd0>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA2(USART_TX) to alternate function
	GPIOA->MODER &=~(1U<<4); // bit4 =0
 8000214:	4b30      	ldr	r3, [pc, #192]	@ (80002d8 <usart_init+0xd4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2f      	ldr	r2, [pc, #188]	@ (80002d8 <usart_init+0xd4>)
 800021a:	f023 0310 	bic.w	r3, r3, #16
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5); // bit5 =1
 8000220:	4b2d      	ldr	r3, [pc, #180]	@ (80002d8 <usart_init+0xd4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2c      	ldr	r2, [pc, #176]	@ (80002d8 <usart_init+0xd4>)
 8000226:	f043 0320 	orr.w	r3, r3, #32
 800022a:	6013      	str	r3, [r2, #0]
	//Set PA3(USART_RX) to alternate function
	GPIOA->MODER &=~(1U<<6); // bit6 =0
 800022c:	4b2a      	ldr	r3, [pc, #168]	@ (80002d8 <usart_init+0xd4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a29      	ldr	r2, [pc, #164]	@ (80002d8 <usart_init+0xd4>)
 8000232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7); // bit7 =1
 8000238:	4b27      	ldr	r3, [pc, #156]	@ (80002d8 <usart_init+0xd4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a26      	ldr	r2, [pc, #152]	@ (80002d8 <usart_init+0xd4>)
 800023e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000242:	6013      	str	r3, [r2, #0]
	 * AFR[1] WHICH AFRHy for PORT x Bit y (y=8..15)
	 * reference to alternate function mapping we have USART_RX
	 * at column AF07 to set this Bit11 ->0 , Bit10,9,8->1
	 */
	// PA2 as USART_TXD
	GPIOA->AFR[0]&=~(1U<<11); //BIT11->0
 8000244:	4b24      	ldr	r3, [pc, #144]	@ (80002d8 <usart_init+0xd4>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a23      	ldr	r2, [pc, #140]	@ (80002d8 <usart_init+0xd4>)
 800024a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000250:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <usart_init+0xd4>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a20      	ldr	r2, [pc, #128]	@ (80002d8 <usart_init+0xd4>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800025a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 800025c:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <usart_init+0xd4>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a1d      	ldr	r2, [pc, #116]	@ (80002d8 <usart_init+0xd4>)
 8000262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000266:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<8);
 8000268:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <usart_init+0xd4>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a1a      	ldr	r2, [pc, #104]	@ (80002d8 <usart_init+0xd4>)
 800026e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000272:	6213      	str	r3, [r2, #32]
	//PA3 AS USART_RXD BIT15->0, BIT14,13,12->1
	GPIOA->AFR[0]&=~(1U<<15); //BIT15->0
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <usart_init+0xd4>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a17      	ldr	r2, [pc, #92]	@ (80002d8 <usart_init+0xd4>)
 800027a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <usart_init+0xd4>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a14      	ldr	r2, [pc, #80]	@ (80002d8 <usart_init+0xd4>)
 8000286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800028a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <usart_init+0xd4>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a11      	ldr	r2, [pc, #68]	@ (80002d8 <usart_init+0xd4>)
 8000292:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<12);
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <usart_init+0xd4>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a0e      	ldr	r2, [pc, #56]	@ (80002d8 <usart_init+0xd4>)
 800029e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002a2:	6213      	str	r3, [r2, #32]
	// clock for USART2_TX
	RCC->APB1ENR |= USART2EN;
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <usart_init+0xd0>)
 80002a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <usart_init+0xd0>)
 80002aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002ae:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set baudrate*/
	USART2->BRR = (PERIPHCLK + (BAUDRATE/2))/BAUDRATE;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <usart_init+0xd8>)
 80002b2:	228b      	movs	r2, #139	@ 0x8b
 80002b4:	609a      	str	r2, [r3, #8]
	//ENABLE Transmitter CR1 bit3->1
	USART2->CR1 = TE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <usart_init+0xd8>)
 80002b8:	2208      	movs	r2, #8
 80002ba:	60da      	str	r2, [r3, #12]
	//ENABLE Receiver CR1 bit3->1
	USART2->CR1 = RE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <usart_init+0xd8>)
 80002be:	2204      	movs	r2, #4
 80002c0:	60da      	str	r2, [r3, #12]
	//enable USART CR1 bit13->1
	USART2->CR1 = UE;
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <usart_init+0xd8>)
 80002c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002c8:	60da      	str	r2, [r3, #12]
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40004400 	.word	0x40004400

080002e0 <usart_write>:

void usart_write(int ch){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	// to wait until the last BYTE of data transfered
	while((USART2->SR & TXE)==0);
 80002e8:	bf00      	nop
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <usart_write+0x2c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <usart_write+0xa>
	// if '&' operation give 1 then it show the data is transfered
	/*send the data*/
	USART2->DR = (ch & 0xff);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <usart_write+0x2c>)
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	6053      	str	r3, [r2, #4]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40004400 	.word	0x40004400

08000310 <usart_read>:

int usart_read(void){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	// to wait until the bit5 of SR is 0-> data is not received
	while((USART2->SR & RXE)==0);
 8000314:	bf00      	nop
 8000316:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <usart_read+0x20>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0320 	and.w	r3, r3, #32
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <usart_read+0x6>
	/*receiver has a data byte , read to read*/
	return USART2->DR;
 8000322:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <usart_read+0x20>)
 8000324:	685b      	ldr	r3, [r3, #4]
}
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40004400 	.word	0x40004400

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	@ (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 f811 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff35 	bl	80001d4 <main>

0800036a <LoopForever>:

LoopForever:
  b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000378:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 800037c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000380:	2000001c 	.word	0x2000001c

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4d0d      	ldr	r5, [pc, #52]	@ (80003c0 <__libc_init_array+0x38>)
 800038c:	4c0d      	ldr	r4, [pc, #52]	@ (80003c4 <__libc_init_array+0x3c>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	2600      	movs	r6, #0
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	4d0b      	ldr	r5, [pc, #44]	@ (80003c8 <__libc_init_array+0x40>)
 800039a:	4c0c      	ldr	r4, [pc, #48]	@ (80003cc <__libc_init_array+0x44>)
 800039c:	f000 f818 	bl	80003d0 <_init>
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	2600      	movs	r6, #0
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
