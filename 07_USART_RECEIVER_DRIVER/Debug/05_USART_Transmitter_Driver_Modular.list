
05_USART_Transmitter_Driver_Modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000374  0800037c  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000374  08000374  0000137c  2**0
                  CONTENTS
  4 .ARM          00000000  08000374  08000374  0000137c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000374  0800037c  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000374  08000374  00001374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000378  08000378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800037c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800037c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000045c  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000195  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000019a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc75  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b90  00000000  00000000  0000f6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f813  00000000  00000000  0001025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fa6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  0005fab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0005fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800035c 	.word	0x0800035c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800035c 	.word	0x0800035c

080001d4 <main>:
 *also for simple and structured Main.c file
 */
#include "stm32f4xx.h"
#include "usart.h"

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	usart_init(); // calling the function Initialization
 80001da:	f000 f811 	bl	8000200 <usart_init>
	// it get all the initial steps from Usart.c by Usart.h
    while(1){
    	usart_write('k');
 80001de:	206b      	movs	r0, #107	@ 0x6b
 80001e0:	f000 f856 	bl	8000290 <usart_write>
    	for(int i=0;i<1000000;i++);
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	e002      	b.n	80001f0 <main+0x1c>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3301      	adds	r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a02      	ldr	r2, [pc, #8]	@ (80001fc <main+0x28>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	ddf8      	ble.n	80001ea <main+0x16>
    	usart_write('k');
 80001f8:	e7f1      	b.n	80001de <main+0xa>
 80001fa:	bf00      	nop
 80001fc:	000f423f 	.word	0x000f423f

08000200 <usart_init>:

#define TE (1U<<3)
#define UE (1U<<13)
#define TXE (1U<<7) //it ensure the last bit data transfered

void usart_init(void){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	/*Enable clock for PORT A*/
	RCC->AHB1ENR |= GPIOAEN;
 8000204:	4b1f      	ldr	r3, [pc, #124]	@ (8000284 <usart_init+0x84>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a1e      	ldr	r2, [pc, #120]	@ (8000284 <usart_init+0x84>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA2(USART_TX) to alternate function
	GPIOA->MODER &=~(1U<<4); // bit4 =0
 8000210:	4b1d      	ldr	r3, [pc, #116]	@ (8000288 <usart_init+0x88>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a1c      	ldr	r2, [pc, #112]	@ (8000288 <usart_init+0x88>)
 8000216:	f023 0310 	bic.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5); // bit5 =1
 800021c:	4b1a      	ldr	r3, [pc, #104]	@ (8000288 <usart_init+0x88>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a19      	ldr	r2, [pc, #100]	@ (8000288 <usart_init+0x88>)
 8000222:	f043 0320 	orr.w	r3, r3, #32
 8000226:	6013      	str	r3, [r2, #0]
	 * IF need to configure more than bit 7 , we can use
	 * AFR[1] WHICH AFRHy for PORT x Bit y (y=8..15)
	 * reference to alternate function mapping we have USART_TX
	 * at column AF07 to set this Bit11 ->0 , Bit10,9,8->1
	 */
	GPIOA->AFR[0]&=~(1U<<11); //BIT11->0
 8000228:	4b17      	ldr	r3, [pc, #92]	@ (8000288 <usart_init+0x88>)
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	4a16      	ldr	r2, [pc, #88]	@ (8000288 <usart_init+0x88>)
 800022e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000232:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000234:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <usart_init+0x88>)
 8000236:	6a1b      	ldr	r3, [r3, #32]
 8000238:	4a13      	ldr	r2, [pc, #76]	@ (8000288 <usart_init+0x88>)
 800023a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800023e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8000240:	4b11      	ldr	r3, [pc, #68]	@ (8000288 <usart_init+0x88>)
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	4a10      	ldr	r2, [pc, #64]	@ (8000288 <usart_init+0x88>)
 8000246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800024a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<8);
 800024c:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <usart_init+0x88>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <usart_init+0x88>)
 8000252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000256:	6213      	str	r3, [r2, #32]
	// clock for USART2_TX
	RCC->APB1ENR |= USART2EN;
 8000258:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <usart_init+0x84>)
 800025a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800025c:	4a09      	ldr	r2, [pc, #36]	@ (8000284 <usart_init+0x84>)
 800025e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000262:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set baudrate*/
	USART2->BRR = (PERIPHCLK + (BAUDRATE/2))/BAUDRATE;
 8000264:	4b09      	ldr	r3, [pc, #36]	@ (800028c <usart_init+0x8c>)
 8000266:	228b      	movs	r2, #139	@ 0x8b
 8000268:	609a      	str	r2, [r3, #8]
	//ENABLE transmitter CR1 bit3->1
	USART2->CR1 = TE;
 800026a:	4b08      	ldr	r3, [pc, #32]	@ (800028c <usart_init+0x8c>)
 800026c:	2208      	movs	r2, #8
 800026e:	60da      	str	r2, [r3, #12]
	//enable USART CR1 bit13->1
	USART2->CR1 = UE;
 8000270:	4b06      	ldr	r3, [pc, #24]	@ (800028c <usart_init+0x8c>)
 8000272:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000276:	60da      	str	r2, [r3, #12]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020000 	.word	0x40020000
 800028c:	40004400 	.word	0x40004400

08000290 <usart_write>:

void usart_write(int ch){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	// to wait until the last BYTE of data transfered
	while((USART2->SR & TXE)==0);
 8000298:	bf00      	nop
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <usart_write+0x2c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <usart_write+0xa>
	// if '&' operation give 1 then it show the data is transfered
	/*send the data*/
	USART2->DR = (ch & 0xff);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <usart_write+0x2c>)
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	6053      	str	r3, [r2, #4]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40004400 	.word	0x40004400

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 f811 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ff6f 	bl	80001d4 <main>

080002f6 <LoopForever>:

LoopForever:
  b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	0800037c 	.word	0x0800037c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	4d0d      	ldr	r5, [pc, #52]	@ (800034c <__libc_init_array+0x38>)
 8000318:	4c0d      	ldr	r4, [pc, #52]	@ (8000350 <__libc_init_array+0x3c>)
 800031a:	1b64      	subs	r4, r4, r5
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	2600      	movs	r6, #0
 8000320:	42a6      	cmp	r6, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	4d0b      	ldr	r5, [pc, #44]	@ (8000354 <__libc_init_array+0x40>)
 8000326:	4c0c      	ldr	r4, [pc, #48]	@ (8000358 <__libc_init_array+0x44>)
 8000328:	f000 f818 	bl	800035c <_init>
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	2600      	movs	r6, #0
 8000332:	42a6      	cmp	r6, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f855 3b04 	ldr.w	r3, [r5], #4
 800033c:	4798      	blx	r3
 800033e:	3601      	adds	r6, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	f855 3b04 	ldr.w	r3, [r5], #4
 8000346:	4798      	blx	r3
 8000348:	3601      	adds	r6, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000374 	.word	0x08000374
 8000350:	08000374 	.word	0x08000374
 8000354:	08000374 	.word	0x08000374
 8000358:	08000378 	.word	0x08000378

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr
